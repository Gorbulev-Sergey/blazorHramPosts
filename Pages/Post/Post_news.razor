@using blazorHramPosts.Models
@inject AuthenticationStateProvider StateProvider
@inject NavigationManager MyNavigationManager
@inject blazorHramPosts.Services.ICommentsService CommentsService
@inject blazorHramPosts.Services.ILikesService LikeService
@using Microsoft.AspNetCore.Identity;
@inject UserManager<user> userManager;


<div class="card mb-4 shadow-sm">
    <!--Верхняя часть публикации-->
    <div class="row no-gutters">
        <div class="col-lg d-flex flex-column">
            <div class="card-body mb-auto">
                <!--Название публикаци-->
                <h5 class="card-title">@post.title</h5>
                <!--Сокращённое содержимое-->
                @((MarkupString)post.description)<br />
                <small class="text-muted">Опубликовано @post.updated.ToShortDateString()</small>
            </div>
            <div class="p-3 d-flex justify-content-between">
                <div>
                    <!--Кнопка подробнее-->
                    @if (!string.IsNullOrEmpty(post.content))
                    {
                        <button class="btn btn-light align-self-center" onclick="$(this).parent().parent().parent().parent().parent().children().last().collapse('toggle')"><i class="fas fa-angle-double-down"></i>&nbsp;&nbsp;Подробнее</button>

                    }
                </div>
                <div>
                    <!--Кнопки комментарии, нравится, поделиться-->
                    <AuthorizeView Context="NewContext">
                        <Authorized>
                            <EditForm Model="@like" OnValidSubmit="@likeValidSubmit">
                                <button class="btn btn-light align-self-center" type="submit">
                                    <i class="far fa-heart text-dark"></i>
                                </button>
                            </EditForm>
                        </Authorized>
                    </AuthorizeView>
                    <button class="btn btn-light align-self-center" onclick="$(this).parent().parent().parent().parent().next().collapse('toggle')"><i class="far fa-comment-alt"></i> @post.comments.Count</button>
                    <div class="dropup float-right ml-1">
                        <button class="btn btn-light align-self-center" data-toggle="dropdown"><i class="fas fa-share-alt"></i></button>
                        <div class="dropdown-menu dropdown-menu-right mb-2 p-0 border-0">
                            <div class="btn-group">
                                <a class="btn btn-light" href="https://vk.com/share.php?url=@MyNavigationManager.Uri" target="_blank">
                                    <i class="fab fa-vk" style="font-size:large"></i>
                                </a>
                                <a class="btn btn-light" href="https://connect.ok.ru/offer?url=@MyNavigationManager.Uri" target="_blank">
                                    <i class="fab fa-odnoklassniki" style="font-size:large"></i>
                                </a>
                                <a class="btn btn-light" href="https://twitter.com/intent/tweet?&url=@MyNavigationManager.Uri" target="_blank">
                                    <i class="fab fa-twitter" style="font-size:large"></i>
                                </a>
                                <a class="btn btn-light" href="https://www.facebook.com/sharer.php?u=@MyNavigationManager.Uri" target="_blank">
                                    <i class="fab fa-facebook-f" style="font-size:large"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--Картинка публикации-->
        @if (post.cover_image != null)
        {
            <div class="col-lg-4">
                <img src="@post.cover_image" class="card-img" alt="...">
            </div>
        }
    </div>
    <!--Комментарии-->
    <AuthorizeView Context="NewContext">
        <Authorized>
            <div class="card-body collapse" data-parent="#accordion">
                <EditForm Model="@comment" OnValidSubmit="@commentValidSubmit">
                    <div class="card-body p-1 mb-3">
                        <div class="input-group">
                            <input name="text" type="text" @bind="comment.text" class="form-control" placeholder="Напишите комментарий" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="submit">Добавить</button>
                            </div>
                        </div>
                    </div>
                </EditForm>
                @foreach (comment комментарий in post.comments.Reverse())
                {
                    <p>
                        <span class="badge badge-dark mr-2">
                            <span class="badge badge-pill badge-light">@комментарий.created.ToShortDateString()</span>
                            @комментарий.userName
                        </span>
                        @комментарий.text
                    </p>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="card-body collapse" data-parent="#accordion">
                <div class="card-body p-1">
                    <p class="card-text">Если желаете оставить комментарий <a class="btn-link" href='/Identity/Account/Register'>пройдите регистрацию на сайте</a> или <a class="btn-link" href='/Identity/Account/Login'>войдите на сайт</a>.</p>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
    <!--Полное содержимое-->
    <div class="card-body collapse" data-parent="#accordion">
        @((MarkupString)post.content)
    </div>
</div>

@code {
    [Parameter]
    public post post { get; set; }

    private comment comment = new comment();
    private async Task commentValidSubmit()
    {
        var user = await userManager.GetUserAsync((await StateProvider.GetAuthenticationStateAsync()).User);

        comment.postID = post.ID;
        comment.userId = user.Id;
        comment.userName = user.UserName;
        CommentsService.add(comment);
    }

    private like like = new like();
    private async Task likeValidSubmit()
    {
        var user = await userManager.GetUserAsync((await StateProvider.GetAuthenticationStateAsync()).User);

        like.postID = post.ID;
        like.userId = user.Id;
        LikeService.add(like);
    }
}
